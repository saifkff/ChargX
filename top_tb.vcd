$date
	Tue Jun 17 16:35:54 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module top_tb $end
$var reg 1 ! clk $end
$var reg 1 " rst $end
$scope module uut $end
$var wire 1 ! clk $end
$var wire 32 # ex_pc_plus_imm_2 [31:0] $end
$var wire 1 " rst $end
$var wire 1 $ store_wenb $end
$var wire 1 % wb_wenb $end
$var wire 5 & wb_rd [4:0] $end
$var wire 32 ' wb_pcplus4 [31:0] $end
$var wire 3 ( wb_mux_sel [2:0] $end
$var wire 32 ) wb_mem_data [31:0] $end
$var wire 1 * wb_lui_enb $end
$var wire 1 + wb_load_enb $end
$var wire 1 , wb_jal_enb $end
$var wire 32 - wb_data [31:0] $end
$var wire 1 . wb_auipc_wenb $end
$var wire 32 / wb_alu_result [31:0] $end
$var wire 1 0 stall $end
$var wire 1 1 mem_wenb $end
$var wire 1 2 mem_sw $end
$var wire 1 3 mem_store_enb $end
$var wire 32 4 mem_store_data [31:0] $end
$var wire 1 5 mem_sh $end
$var wire 1 6 mem_sb $end
$var wire 32 7 mem_read_data [31:0] $end
$var wire 5 8 mem_rd [4:0] $end
$var wire 1 9 mem_load_enb $end
$var wire 32 : mem_alu_result [31:0] $end
$var wire 32 ; if_pcplus4 [31:0] $end
$var wire 32 < if_pc_out [31:0] $end
$var wire 32 = if_instruction [31:0] $end
$var wire 1 > id_xorr $end
$var wire 1 ? id_xori $end
$var wire 1 @ id_wenb $end
$var wire 1 A id_sw $end
$var wire 1 B id_sub $end
$var wire 1 C id_store_enb $end
$var wire 1 D id_srlr $end
$var wire 1 E id_srli $end
$var wire 1 F id_srar $end
$var wire 1 G id_srai $end
$var wire 1 H id_sltur $end
$var wire 1 I id_sltui $end
$var wire 1 J id_sltr $end
$var wire 1 K id_slti $end
$var wire 1 L id_sllr $end
$var wire 1 M id_slli $end
$var wire 1 N id_sh $end
$var wire 1 O id_sb $end
$var wire 1 P id_rs2_imm_sel $end
$var wire 32 Q id_rs2_forwarded [31:0] $end
$var wire 32 R id_rs2_data [31:0] $end
$var wire 5 S id_rs2 [4:0] $end
$var wire 32 T id_rs1_forwarded [31:0] $end
$var wire 32 U id_rs1_data [31:0] $end
$var wire 5 V id_rs1 [4:0] $end
$var wire 5 W id_rd [4:0] $end
$var wire 32 X id_pcplus4 [31:0] $end
$var wire 1 Y id_orr $end
$var wire 1 Z id_ori $end
$var wire 1 [ id_lui_enb $end
$var wire 1 \ id_load_enb $end
$var wire 1 ] id_jalreverse $end
$var wire 1 ^ id_jalr $end
$var wire 1 _ id_jal_enb $end
$var wire 1 ` id_jal $end
$var wire 32 a id_instruction [31:0] $end
$var wire 1 b id_in_to_pr $end
$var wire 32 c id_imm [31:0] $end
$var wire 1 d id_branch_enb $end
$var wire 1 e id_bne $end
$var wire 1 f id_bltu $end
$var wire 1 g id_blt $end
$var wire 1 h id_bgeu $end
$var wire 1 i id_bge $end
$var wire 1 j id_beq $end
$var wire 1 k id_auipc_wenb $end
$var wire 1 l id_andr $end
$var wire 1 m id_andi $end
$var wire 4 n id_alu_sel [3:0] $end
$var wire 1 o id_addr $end
$var wire 1 p id_addi2 $end
$var wire 1 q id_addi $end
$var wire 2 r forward_b [1:0] $end
$var wire 2 s forward_a [1:0] $end
$var wire 1 t flush $end
$var wire 1 u ex_wenb $end
$var wire 1 v ex_sw $end
$var wire 1 w ex_store_enb $end
$var wire 32 x ex_store_data [31:0] $end
$var wire 1 y ex_sh $end
$var wire 2 z ex_sel_bit_mux [1:0] $end
$var wire 1 { ex_sb $end
$var wire 1 | ex_rs2_imm_sel $end
$var wire 32 } ex_rs2_forwarded [31:0] $end
$var wire 32 ~ ex_rs2_data [31:0] $end
$var wire 5 !" ex_rs2 [4:0] $end
$var wire 32 "" ex_rs1_plus_imm_for_jalr [31:0] $end
$var wire 32 #" ex_rs1_forwarded [31:0] $end
$var wire 32 $" ex_rs1_data [31:0] $end
$var wire 5 %" ex_rs1 [4:0] $end
$var wire 5 &" ex_rd [4:0] $end
$var wire 32 '" ex_pcplus4 [31:0] $end
$var wire 32 (" ex_pc_plus_imm [31:0] $end
$var wire 1 )" ex_lui_enb $end
$var wire 1 *" ex_load_enb $end
$var wire 1 +" ex_jal_enb $end
$var wire 32 ," ex_imm [31:0] $end
$var wire 1 -" ex_branch_taken $end
$var wire 1 ." ex_branch_enb $end
$var wire 1 /" ex_auipc_wenb $end
$var wire 4 0" ex_alu_sel [3:0] $end
$var wire 32 1" ex_alu_result [31:0] $end
$var wire 32 2" ex_alu_data_B [31:0] $end
$scope module adder_for_auipc $end
$var wire 32 3" pc_plus_imm_for_auipc [31:0] $end
$var wire 32 4" pc_for_auipc [31:0] $end
$var wire 32 5" imm_for_btype [31:0] $end
$upscope $end
$scope module alu $end
$var wire 32 6" dataA [31:0] $end
$var wire 4 7" sel [3:0] $end
$var wire 32 8" dataB [31:0] $end
$var reg 1 -" branch_taken $end
$var reg 32 9" out [31:0] $end
$upscope $end
$scope module control_unit $end
$var wire 1 :" add $end
$var wire 1 q addi $end
$var wire 1 p addi2 $end
$var wire 1 o addr $end
$var wire 1 ;" andd $end
$var wire 1 m andi $end
$var wire 1 l andr $end
$var wire 1 k auipc_wenb $end
$var wire 1 j beq $end
$var wire 1 i bge $end
$var wire 1 h bgeu $end
$var wire 1 g blt $end
$var wire 1 f bltu $end
$var wire 1 e bne $end
$var wire 1 d branch_enb $end
$var wire 1 -" branch_taken $end
$var wire 1 b in_to_pr $end
$var wire 1 ` jal $end
$var wire 1 _ jal_enb $end
$var wire 1 ^ jalr $end
$var wire 1 ] jalreverse $end
$var wire 1 <" lb $end
$var wire 1 =" lbu $end
$var wire 1 >" lh $end
$var wire 1 ?" lhu $end
$var wire 1 \ load_enb $end
$var wire 1 [ lui_enb $end
$var wire 1 @" lw $end
$var wire 1 Z ori $end
$var wire 1 Y orr $end
$var wire 1 A" orrr $end
$var wire 1 B" out0 $end
$var wire 1 C" out1 $end
$var wire 1 D" out2 $end
$var wire 1 E" out3 $end
$var wire 1 P rs2_imm_sel $end
$var wire 1 O sb $end
$var wire 1 N sh $end
$var wire 1 F" sll $end
$var wire 1 M slli $end
$var wire 1 L sllr $end
$var wire 1 G" slt $end
$var wire 1 K slti $end
$var wire 1 J sltr $end
$var wire 1 H" sltu $end
$var wire 1 I sltui $end
$var wire 1 H sltur $end
$var wire 1 I" sra $end
$var wire 1 G srai $end
$var wire 1 F srar $end
$var wire 1 J" srl $end
$var wire 1 E srli $end
$var wire 1 D srlr $end
$var wire 1 C store_enb $end
$var wire 1 B sub $end
$var wire 1 A sw $end
$var wire 1 @ wenb $end
$var wire 1 ? xori $end
$var wire 1 > xorr $end
$var wire 1 K" xorrr $end
$var wire 32 L" instruction [31:0] $end
$var wire 1 M" i8 $end
$var wire 1 N" i7 $end
$var wire 1 O" i6 $end
$var wire 1 P" i5 $end
$var wire 1 Q" i4 $end
$var wire 1 R" i3 $end
$var wire 1 S" i2 $end
$var wire 1 T" i1 $end
$var wire 1 U" i0 $end
$var reg 4 V" sel [3:0] $end
$var reg 2 W" sel_bit_mux [1:0] $end
$upscope $end
$scope module data_mem $end
$var wire 1 ! clk $end
$var wire 1 X" lb $end
$var wire 1 Y" lbu $end
$var wire 1 Z" lh $end
$var wire 1 [" lhu $end
$var wire 1 \" lw $end
$var wire 32 ]" write_data [31:0] $end
$var wire 1 2 sw $end
$var wire 1 5 sh $end
$var wire 1 6 sb $end
$var wire 1 9 load_enb $end
$var wire 32 ^" address [31:0] $end
$var reg 32 _" read_data [31:0] $end
$upscope $end
$scope module decoder $end
$var wire 5 `" rs2 [4:0] $end
$var wire 5 a" rs1 [4:0] $end
$var wire 5 b" rdi [4:0] $end
$var wire 32 c" instruction [31:0] $end
$upscope $end
$scope module ex_mem $end
$var wire 32 d" alu_result_in [31:0] $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 1 u wb_in $end
$var wire 1 v sw_in $end
$var wire 1 w store_enb_in $end
$var wire 32 e" store_data_in [31:0] $end
$var wire 1 y sh_in $end
$var wire 1 { sb_in $end
$var wire 5 f" rs2_in [4:0] $end
$var wire 5 g" rs1_in [4:0] $end
$var wire 5 h" rd_in [4:0] $end
$var wire 1 *" load_enb_in $end
$var wire 1 t flush $end
$var reg 32 i" alu_result_out [31:0] $end
$var reg 1 9 load_enb_out $end
$var reg 5 j" rd_out [4:0] $end
$var reg 5 k" rs1_out [4:0] $end
$var reg 5 l" rs2_out [4:0] $end
$var reg 1 6 sb_out $end
$var reg 1 5 sh_out $end
$var reg 32 m" store_data_out [31:0] $end
$var reg 1 3 store_enb_out $end
$var reg 1 2 sw_out $end
$var reg 1 1 wb_out $end
$upscope $end
$scope module fetch $end
$var wire 1 ! clk $end
$var wire 32 n" pc_out [31:0] $end
$var wire 32 o" pc_plus_imm [31:0] $end
$var wire 32 p" pc_plus_imm_2 [31:0] $end
$var wire 1 " rst $end
$var wire 2 q" sel [1:0] $end
$var wire 1 0 stall $end
$var wire 32 r" rs1_plus_imm_for_jalr [31:0] $end
$var wire 32 s" pc_plus_4 [31:0] $end
$var wire 32 t" pc_next [31:0] $end
$var wire 32 u" pc [31:0] $end
$var wire 32 v" instruction [31:0] $end
$scope module IM $end
$var wire 32 w" instruction [31:0] $end
$var wire 32 x" addr [31:0] $end
$upscope $end
$scope module PC $end
$var wire 1 ! clk $end
$var wire 1 y" pc_write $end
$var wire 1 " rst $end
$var wire 32 z" pc_next [31:0] $end
$var reg 32 {" pc_out [31:0] $end
$upscope $end
$scope module mux4 $end
$var wire 32 |" pc_plus_imm [31:0] $end
$var wire 32 }" pc_plus_imm_2 [31:0] $end
$var wire 2 ~" sel [1:0] $end
$var wire 32 !# rs1_plus_imm_for_jalr [31:0] $end
$var wire 32 "# pc_plus_4 [31:0] $end
$var reg 32 ## out [31:0] $end
$upscope $end
$upscope $end
$scope module forwarding_unit $end
$var wire 1 $# clk $end
$var wire 5 %# id_rs1 [4:0] $end
$var wire 5 &# id_rs2 [4:0] $end
$var wire 5 '# mem_rd [4:0] $end
$var wire 1 1 mem_wb $end
$var wire 1 3 mem_wenb $end
$var wire 1 % wb_wenb $end
$var wire 5 (# wb_rd [4:0] $end
$var wire 5 )# ex_rs2 [4:0] $end
$var wire 5 *# ex_rs1 [4:0] $end
$var reg 2 +# forward_a [1:0] $end
$var reg 2 ,# forward_b [1:0] $end
$upscope $end
$scope module hazard_detction $end
$var wire 1 -" branch_taken $end
$var wire 1 t flush $end
$var wire 5 -# id_rs1 [4:0] $end
$var wire 5 .# id_rs2 [4:0] $end
$var wire 1 0 stall $end
$var wire 1 +" jal_enb $end
$var wire 5 /# ex_rd [4:0] $end
$var wire 1 *" ex_load_enb $end
$upscope $end
$scope module id_ex $end
$var wire 4 0# alu_sel_in [3:0] $end
$var wire 1 k auipc_wenb_in $end
$var wire 1 d branch_enb_in $end
$var wire 1 ! clk $end
$var wire 1 t flush $end
$var wire 1 _ jal_enb_in $end
$var wire 1 \ load_enb_in $end
$var wire 1 [ lui_enb_in $end
$var wire 5 1# rd_in [4:0] $end
$var wire 32 2# rs1_data_in [31:0] $end
$var wire 5 3# rs1_in [4:0] $end
$var wire 32 4# rs2_data_in [31:0] $end
$var wire 1 P rs2_imm_sel_in $end
$var wire 5 5# rs2_in [4:0] $end
$var wire 1 " rst $end
$var wire 1 O sb_in $end
$var wire 1 N sh_in $end
$var wire 1 0 stall $end
$var wire 1 C store_enb_in $end
$var wire 1 A sw_in $end
$var wire 1 @ wenb_in $end
$var wire 32 6# pcplus4_in [31:0] $end
$var wire 32 7# imm_in [31:0] $end
$var reg 4 8# alu_sel_out [3:0] $end
$var reg 1 /" auipc_wenb_out $end
$var reg 1 ." branch_enb_out $end
$var reg 32 9# imm_out [31:0] $end
$var reg 1 +" jal_enb_out $end
$var reg 1 *" load_enb_out $end
$var reg 1 )" lui_enb_out $end
$var reg 32 :# pcplus4_out [31:0] $end
$var reg 5 ;# rd_out [4:0] $end
$var reg 32 <# rs1_data_out [31:0] $end
$var reg 5 =# rs1_out [4:0] $end
$var reg 32 ># rs2_data_out [31:0] $end
$var reg 1 | rs2_imm_sel_out $end
$var reg 5 ?# rs2_out [4:0] $end
$var reg 1 { sb_out $end
$var reg 1 y sh_out $end
$var reg 1 w store_enb_out $end
$var reg 1 v sw_out $end
$var reg 1 u wenb_out $end
$upscope $end
$scope module if_id $end
$var wire 1 ! clk $end
$var wire 1 t flush $end
$var wire 32 @# instruction_in [31:0] $end
$var wire 1 " rst $end
$var wire 1 0 stall $end
$var wire 32 A# pcplus4_in [31:0] $end
$var reg 32 B# instruction_out [31:0] $end
$var reg 32 C# pcplus4_out [31:0] $end
$upscope $end
$scope module immediate_generator $end
$var wire 32 D# instruction [31:0] $end
$var reg 32 E# imm [31:0] $end
$var reg 4 F# sel [3:0] $end
$upscope $end
$scope module mem_wb $end
$var wire 32 G# alu_result_in [31:0] $end
$var wire 1 /" auipc_wenb_in $end
$var wire 1 ! clk $end
$var wire 1 +" jal_enb_in $end
$var wire 1 9 load_enb_in $end
$var wire 1 )" lui_enb_in $end
$var wire 32 H# mem_data_in [31:0] $end
$var wire 32 I# pcplus4_in [31:0] $end
$var wire 5 J# rd_in [4:0] $end
$var wire 1 " rst $end
$var wire 1 1 wenb_in $end
$var reg 32 K# alu_result_out [31:0] $end
$var reg 1 . auipc_wenb_out $end
$var reg 1 , jal_enb_out $end
$var reg 1 + load_enb_out $end
$var reg 1 * lui_enb_out $end
$var reg 32 L# mem_data_out [31:0] $end
$var reg 32 M# pcplus4_out [31:0] $end
$var reg 5 N# rd_out [4:0] $end
$var reg 1 % wenb_out $end
$upscope $end
$scope module mux8to1 $end
$var wire 32 O# alu_result [31:0] $end
$var wire 32 P# imm_for_b_type [31:0] $end
$var wire 32 Q# load_result [31:0] $end
$var wire 32 R# pc_plus_4 [31:0] $end
$var wire 32 S# pc_plus_imm [31:0] $end
$var wire 3 T# sel [2:0] $end
$var reg 32 U# out [31:0] $end
$upscope $end
$scope module mux_rs2 $end
$var wire 32 V# rs2 [31:0] $end
$var wire 4 W# sel_bit [3:0] $end
$var reg 32 X# output_data_forstore [31:0] $end
$upscope $end
$scope module pcplus4 $end
$var wire 32 Y# pc [31:0] $end
$var wire 32 Z# pc_plus4 [31:0] $end
$upscope $end
$scope module priority_encoder_8to3 $end
$var wire 1 [# alu_result $end
$var wire 1 . enable_for_auipc $end
$var wire 1 , jal_enb $end
$var wire 1 + load_enable $end
$var wire 1 * lui_enable $end
$var wire 5 \# input_concat [4:0] $end
$var reg 3 ]# sel [2:0] $end
$upscope $end
$scope module regfile $end
$var wire 1 ! clk $end
$var wire 32 ^# data_in [31:0] $end
$var wire 1 % enable $end
$var wire 5 _# rd_select [4:0] $end
$var wire 1 " reset $end
$var wire 5 `# rs1 [4:0] $end
$var wire 5 a# rs2 [4:0] $end
$var reg 32 b# data_out1 [31:0] $end
$var reg 32 c# data_out2 [31:0] $end
$var reg 1024 d# registers [1023:0] $end
$var integer 32 e# i [31:0] $end
$upscope $end
$scope module rs1_plus_im $end
$var wire 32 f# imm_input [31:0] $end
$var wire 32 g# rs1 [31:0] $end
$var reg 32 h# rs1_plus_im [31:0] $end
$upscope $end
$scope module rs2orimm $end
$var wire 32 i# imm [31:0] $end
$var wire 32 j# rs2 [31:0] $end
$var wire 1 | select $end
$var reg 32 k# dataB [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0 k#
b0 j#
b0 i#
b100 h#
b0 g#
b0 f#
b100000 e#
b0 d#
b0 c#
b0 b#
b0 a#
b0 `#
b0 _#
b0 ^#
b0 ]#
b1 \#
1[#
b100 Z#
b0 Y#
b0 X#
b0 W#
b0 V#
b0 U#
b0 T#
b0 S#
b0 R#
b0 Q#
b0 P#
b0 O#
b0 N#
b0 M#
b0 L#
b0 K#
b0 J#
b0 I#
b0 H#
b0 G#
b1111 F#
b0 E#
b0 D#
b0 C#
b0 B#
b100 A#
b100000000000010010011 @#
b0 ?#
b0 >#
b0 =#
b0 <#
b0 ;#
b0 :#
b0 9#
b0 8#
b0 7#
b0 6#
b0 5#
b0 4#
b0 3#
b0 2#
b0 1#
b0 0#
b0 /#
b0 .#
b0 -#
b0 ,#
b0 +#
b0 *#
b0 )#
b0 (#
b0 '#
b0 &#
b0 %#
z$#
b100 ##
b100 "#
b100 !#
b0 ~"
b0 }"
b0 |"
b0 {"
b100 z"
1y"
b0 x"
b100000000000010010011 w"
b100000000000010010011 v"
b0 u"
b100 t"
b100 s"
b100 r"
b0 q"
b0 p"
b0 o"
b100 n"
b0 m"
bx l"
b0 k"
b0 j"
b0 i"
b0 h"
b0 g"
b0 f"
b0 e"
b0 d"
b0 c"
b0 b"
b0 a"
b0 `"
b0 _"
b0 ^"
b0 ]"
0\"
0["
0Z"
0Y"
0X"
b0 W"
b0 V"
0U"
0T"
0S"
0R"
0Q"
0P"
0O"
0N"
0M"
b0 L"
0K"
0J"
0I"
0H"
0G"
0F"
0E"
0D"
0C"
0B"
0A"
0@"
0?"
0>"
0="
1<"
0;"
0:"
b0 9"
b0 8"
b0 7"
b0 6"
b0 5"
b0 4"
b0 3"
b0 2"
b0 1"
b0 0"
0/"
0."
0-"
b0 ,"
0+"
0*"
0)"
b0 ("
b0 '"
b0 &"
b0 %"
b0 $"
b0 #"
b100 ""
b0 !"
b0 ~
b0 }
0|
0{
b0 z
0y
b0 x
0w
0v
0u
0t
b0 s
b0 r
0q
0p
0o
b0 n
0m
0l
0k
0j
0i
0h
0g
0f
0e
0d
b0 c
1b
b0 a
0`
0_
0^
0]
1\
0[
0Z
0Y
b0 X
b0 W
b0 V
b0 U
b0 T
b0 S
b0 R
b0 Q
1P
0O
0N
0M
0L
0K
0J
0I
0H
0G
0F
0E
0D
0C
0B
0A
1@
0?
0>
b100000000000010010011 =
b100 <
b100 ;
b0 :
09
b0 8
b0 7
06
05
b0 4
03
02
01
00
b0 /
0.
b0 -
0,
0+
0*
b0 )
b0 (
b0 '
b0 &
0%
0$
b0 #
1"
0!
$end
#5
b100000 e#
1!
#10
0!
#15
0\
0<"
1:"
1q
b1000 t"
b1000 z"
b1000 ##
b1000000000000100010011 =
b1000000000000100010011 v"
b1000000000000100010011 w"
b1000000000000100010011 @#
b1 W
b1 b"
b1 1#
b1 S
b1 `"
b1 &#
b1 .#
b1 5#
b1 a#
1S"
b1 c
b1 7#
b1 E#
b0 F#
b1000 <
b1000 n"
b1000 ;
b1000 s"
b1000 "#
b1000 A#
b1000 Z#
b100 u"
b100 x"
b100 {"
b100 Y#
b100 X
b100 6#
b100 C#
b100000000000010010011 a
b100000000000010010011 L"
b100000000000010010011 c"
b100000000000010010011 B#
b100000000000010010011 D#
1*"
1|
1u
1!
0"
#20
0!
#25
b1 1"
b1 9"
b1 d"
b101 ""
b101 r"
b101 !#
b101 h#
b1 2"
b1 8"
b1 k#
b10 W
b10 b"
b10 1#
b10 S
b10 `"
b10 &#
b10 .#
b10 5#
b10 a#
b10 c
b10 7#
b10 E#
b1100 t"
b1100 z"
b1100 ##
b1100000000000110010011 =
b1100000000000110010011 v"
b1100000000000110010011 w"
b1100000000000110010011 @#
19
11
b1 !"
b1 f"
b1 )#
b1 ?#
b1 &"
b1 h"
b1 /#
b1 ;#
b100 '"
b100 4"
b100 :#
b100 I#
b101 #
b101 p"
b101 }"
b101 ("
b101 3"
b101 o"
b101 |"
b101 S#
b1 ,"
b1 5"
b1 9#
b1 P#
b1 f#
b1 i#
0*"
b1000 X
b1000 6#
b1000 C#
b1000000000000100010011 a
b1000000000000100010011 L"
b1000000000000100010011 c"
b1000000000000100010011 B#
b1000000000000100010011 D#
b1100 <
b1100 n"
b1100 ;
b1100 s"
b1100 "#
b1100 A#
b1100 Z#
b1000 u"
b1000 x"
b1000 {"
b1000 Y#
1!
#30
0!
#35
b10 1"
b10 9"
b10 d"
x[#
b10000000000001000010011 =
b10000000000001000010011 v"
b10000000000001000010011 w"
b10000000000001000010011 @#
b11 W
b11 b"
b11 1#
b11 S
b11 `"
b11 &#
b11 .#
b11 5#
b11 a#
b11 c
b11 7#
b11 E#
b10000 t"
b10000 z"
b10000 ##
b110 ""
b110 r"
b110 !#
b110 h#
b10 2"
b10 8"
b10 k#
b1 (
b1 T#
b1 ]#
b10000 <
b10000 n"
b10000 ;
b10000 s"
b10000 "#
b10000 A#
b10000 Z#
b1100 u"
b1100 x"
b1100 {"
b1100 Y#
b1100 X
b1100 6#
b1100 C#
b1100000000000110010011 a
b1100000000000110010011 L"
b1100000000000110010011 c"
b1100000000000110010011 B#
b1100000000000110010011 D#
b10 !"
b10 f"
b10 )#
b10 ?#
b10 &"
b10 h"
b10 /#
b10 ;#
b1000 '"
b1000 4"
b1000 :#
b1000 I#
b1010 #
b1010 p"
b1010 }"
b1010 ("
b1010 3"
b1010 o"
b1010 |"
b1010 S#
b10 ,"
b10 5"
b10 9#
b10 P#
b10 f#
b10 i#
b1 8
b1 j"
b1 '#
b1 J#
b1 :
b1 ^"
b1 i"
b1 G#
09
b100 '
b100 M#
b100 R#
b1x \#
1+
1%
1!
#40
0!
#45
1[#
b1 -
b1 U#
b1 ^#
b11 1"
b11 9"
b11 d"
b0 (
b0 T#
b0 ]#
b111 ""
b111 r"
b111 !#
b111 h#
b11 2"
b11 8"
b11 k#
b100 W
b100 b"
b100 1#
b100 S
b100 `"
b100 &#
b100 .#
b100 5#
b100 a#
b100 c
b100 7#
b100 E#
b10100 t"
b10100 z"
b10100 ##
b1100100000001010110011 =
b1100100000001010110011 v"
b1100100000001010110011 w"
b1100100000001010110011 @#
b1 &
b1 (#
b1 N#
b1 _#
b1000 '
b1000 M#
b1000 R#
b1 /
b1 K#
b1 O#
b1 \#
0+
b10 8
b10 j"
b10 '#
b10 J#
b10 :
b10 ^"
b10 i"
b10 G#
b11 !"
b11 f"
b11 )#
b11 ?#
b11 &"
b11 h"
b11 /#
b11 ;#
b1100 '"
b1100 4"
b1100 :#
b1100 I#
b1111 #
b1111 p"
b1111 }"
b1111 ("
b1111 3"
b1111 o"
b1111 |"
b1111 S#
b11 ,"
b11 5"
b11 9#
b11 P#
b11 f#
b11 i#
b10000 X
b10000 6#
b10000 C#
b10000000000001000010011 a
b10000000000001000010011 L"
b10000000000001000010011 c"
b10000000000001000010011 B#
b10000000000001000010011 D#
b10100 <
b10100 n"
b10100 ;
b10100 s"
b10100 "#
b10100 A#
b10100 Z#
b10000 u"
b10000 x"
b10000 {"
b10000 Y#
1!
#50
0!
#55
0P
1@
0q
1o
b100 1"
b100 9"
b100 d"
bx =
bx v"
bx w"
bx @#
b101 W
b101 b"
b101 1#
b11 S
b11 `"
b11 &#
b11 .#
b11 5#
b11 a#
b100 V
b100 a"
b100 %#
b100 -#
b100 3#
b100 `#
1R"
b0 c
b0 7#
b0 E#
b101 F#
b11000 t"
b11000 z"
b11000 ##
b1000 ""
b1000 r"
b1000 !#
b1000 h#
b100 2"
b100 8"
b100 k#
b10 -
b10 U#
b10 ^#
b11000 <
b11000 n"
b11000 ;
b11000 s"
b11000 "#
b11000 A#
b11000 Z#
b10100 u"
b10100 x"
b10100 {"
b10100 Y#
b10100 X
b10100 6#
b10100 C#
b1100100000001010110011 a
b1100100000001010110011 L"
b1100100000001010110011 c"
b1100100000001010110011 B#
b1100100000001010110011 D#
b100000000000000000000000000000000 d#
b100 !"
b100 f"
b100 )#
b100 ?#
b100 &"
b100 h"
b100 /#
b100 ;#
b10000 '"
b10000 4"
b10000 :#
b10000 I#
b10100 #
b10100 p"
b10100 }"
b10100 ("
b10100 3"
b10100 o"
b10100 |"
b10100 S#
b100 ,"
b100 5"
b100 9#
b100 P#
b100 f#
b100 i#
b11 8
b11 j"
b11 '#
b11 J#
b11 :
b11 ^"
b11 i"
b11 G#
b10 &
b10 (#
b10 N#
b10 _#
b1100 '
b1100 M#
b1100 R#
b10 /
b10 K#
b10 O#
1!
#60
0!
#65
x@
xb
xC
x_
xd
xB"
xO
xN
xA
x^
x]
x`
xh
xf
xi
xg
xe
xj
x\
xC"
x?"
x>"
xm
xG
xE
xI
xM
bx n
bx V"
bx 0#
x="
x@"
xZ
xK
xI"
xJ"
xD"
xE"
xP
x?
xF
xD
b11 x
b11 e"
b11 X#
xH"
xG"
xF"
x:"
xp
x;"
xA"
xK"
b11 }
b11 V#
b11 j#
x<"
xq
xH
xJ
xL
xo
xl
xY
x>
xk
x[
b100 #"
b100 6"
b111 1"
b111 9"
b111 d"
bx Q
bx 4#
bx T
bx 2#
xB
b1 r
b1 ,#
b10 s
b10 +#
b11 -
b11 U#
b11 ^#
b100 ""
b100 r"
b100 !#
b100 h#
b11 2"
b11 8"
b11 k#
bx R
bx c#
bx U
bx b#
bx W
bx b"
bx 1#
bx S
bx `"
bx &#
bx .#
bx 5#
bx a#
bx V
bx a"
bx %#
bx -#
bx 3#
bx `#
xM"
xN"
xO"
xP"
xQ"
xR"
xS"
xT"
xU"
b1111 F#
b11100 t"
b11100 z"
b11100 ##
b11 &
b11 (#
b11 N#
b11 _#
b10000 '
b10000 M#
b10000 R#
b11 /
b11 K#
b11 O#
b100 8
b100 j"
b100 '#
b100 J#
b100 :
b100 ^"
b100 i"
b100 G#
b11 !"
b11 f"
b11 )#
b11 ?#
b100 %"
b100 g"
b100 *#
b100 =#
b101 &"
b101 h"
b101 /#
b101 ;#
b10100 '"
b10100 4"
b10100 :#
b10100 I#
b10100 #
b10100 p"
b10100 }"
b10100 ("
b10100 3"
b10100 o"
b10100 |"
b10100 S#
b0 ,"
b0 5"
b0 9#
b0 P#
b0 f#
b0 i#
0|
b100000000000000000000000000000000100000000000000000000000000000000 d#
b11000 X
b11000 6#
b11000 C#
bx a
bx L"
bx c"
bx B#
bx D#
b11100 <
b11100 n"
b11100 ;
b11100 s"
b11100 "#
b11100 A#
b11100 Z#
b11000 u"
b11000 x"
b11000 {"
b11000 Y#
1!
#70
0!
#75
bx }
bx V#
bx j#
xy"
x0
b100000 t"
b100000 z"
b100000 ##
bx ""
bx r"
bx !#
bx h#
b0 x
b0 e"
b0 X#
xt
bx 2"
bx 8"
bx k#
b0 1"
b0 9"
b0 d"
bx #"
bx 6"
b0 r
b0 ,#
b0 s
b0 +#
b100 -
b100 U#
b100 ^#
b100000 <
b100000 n"
b100000 ;
b100000 s"
b100000 "#
b100000 A#
b100000 Z#
b11100 u"
b11100 x"
b11100 {"
b11100 Y#
b11100 X
b11100 6#
b11100 C#
b11000000000000000000000000000000100000000000000000000000000000000100000000000000000000000000000000 d#
xw
bx !"
bx f"
bx )#
bx ?#
bx %"
bx g"
bx *#
bx =#
bx &"
bx h"
bx /#
bx ;#
b11000 #
b11000 p"
b11000 }"
b11000 ("
b11000 3"
b11000 o"
b11000 |"
b11000 S#
b11000 '"
b11000 4"
b11000 :#
b11000 I#
bx ~
bx >#
bx $"
bx <#
bx g#
xy
xv
bx0 W#
x{
x/"
x)"
x."
x+"
x*"
x|
xu
bx 0"
bx 7"
bx 8#
b101 8
b101 j"
b101 '#
b101 J#
b11 4
b11 ]"
b11 m"
b111 :
b111 ^"
b111 i"
b111 G#
b100 &
b100 (#
b100 N#
b100 _#
b10100 '
b10100 M#
b10100 R#
b100 /
b100 K#
b100 O#
1!
#80
0!
#85
x[#
x$
b111 -
b111 U#
b111 ^#
b101 &
b101 (#
b101 N#
b101 _#
b11000 '
b11000 M#
b11000 R#
b111 /
b111 K#
b111 O#
x.
x*
bx0x \#
x,
x3
bx 8
bx j"
bx '#
bx J#
b0 4
b0 ]"
b0 m"
b0 :
b0 ^"
b0 i"
b0 G#
x2
x5
x6
x9
x1
b11100 #
b11100 p"
b11100 }"
b11100 ("
b11100 3"
b11100 o"
b11100 |"
b11100 S#
b11100 '"
b11100 4"
b11100 :#
b11100 I#
b10000000000000000000000000000000011000000000000000000000000000000100000000000000000000000000000000100000000000000000000000000000000 d#
1!
#90
0!
#95
b0 -
b0 U#
b0 ^#
b1110000000000000000000000000000010000000000000000000000000000000011000000000000000000000000000000100000000000000000000000000000000100000000000000000000000000000000 d#
bx &
bx (#
bx N#
bx _#
b11100 '
b11100 M#
b11100 R#
b0 /
b0 K#
b0 O#
bx \#
x+
x%
1!
#100
0!
#105
1!
#110
0!
#115
1!
#120
0!
#125
1!
#130
0!
#135
1!
#140
0!
#145
1!
#150
0!
#155
1!
#160
0!
#165
1!
#170
0!
#175
1!
#180
0!
#185
1!
#190
0!
#195
1!
#200
0!
#205
1!
#210
0!
#215
1!
